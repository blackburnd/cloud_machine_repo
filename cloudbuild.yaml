steps:
- name: 'gcr.io/cloud-builders/gcloud'
  args:
  - 'compute'
  - 'ssh'
  - 'blackburnd@instance-20250825-143058'
  - '--zone'
  - 'us-central1-c'
  - '--command'
  - |
    set -e

    # Stop any running Nginx and kill all nginx processes to be safe
    sudo systemctl stop nginx || true
    sudo killall -9 nginx || true
    
    if [ -d "/opt/cloud_machine_repo/.git" ]; then
      echo "Repository exists. Pulling latest changes."
      cd /opt/cloud_machine_repo
      git pull origin main
    else
      echo "Repository does not exist. Cloning."
      sudo mkdir -p /opt/cloud_machine_repo
      sudo chown -R blackburnd:blackburnd /opt/cloud_machine_repo
      git clone https://github.com/blackburnd/cloud_machine_repo.git /opt/cloud_machine_repo
    fi
    
    cd /opt/cloud_machine_repo
    
    # Create a virtual environment and install dependencies
    if [ ! -d "venv" ]; then
      python3 -m venv venv
    fi
    source venv/bin/activate
    pip install -r requirements.txt
    
    # Make scripts executable
    chmod +x setup_ssl.sh

    # Clean up any previous Nginx config
    sudo rm -f /etc/nginx/sites-enabled/blackburnsystems.com
    sudo rm -f /etc/nginx/sites-enabled/default
    sudo rm -f /etc/nginx/conf.d/default.conf

    # Copy Nginx config FIRST
    sudo cp nginx/blackburnsystems.com /etc/nginx/sites-available/
    sudo ln -sf /etc/nginx/sites-available/blackburnsystems.com /etc/nginx/sites-enabled/

    # Run SSL setup to obtain and install certificates
    # sudo ./setup_ssl.sh # Commenting this out as Nginx config is now provided manually

    # Validate the Nginx configuration before restarting
    sudo nginx -t

    # Construct the database URL using substitution variables from the trigger
    # The \$$ syntax is used to escape the $ for the remote shell, allowing Cloud Build to substitute the variable.
    _DATABASE_URL="postgresql://\${_PG_USER}:\${_PG_PASS}@\${_PG_HOST}:\${_PG_PORT}/\${_PG_DB}"

    # Create a systemd override file to set the environment variable
    sudo mkdir -p /etc/systemd/system/portfolio.service.d
    echo "[Service]" | sudo tee /etc/systemd/system/portfolio.service.d/override.conf
    echo "Environment=\"_DATABASE_URL=\${_DATABASE_URL}\"" | sudo tee -a /etc/systemd/system/portfolio.service.d/override.conf

    # Set up the systemd service
    sudo cp portfolio.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable portfolio.service
    
    # Restart services and check status
    sudo systemctl restart nginx
    sudo systemctl restart portfolio.service

    echo "Waiting for application to start..."
    sleep 5

    # Check if the service is active. If not, show the logs and fail the build.
    sudo systemctl is-active --quiet portfolio.service || (echo "Application failed to start. Showing logs:" && sudo journalctl -u portfolio.service -n 100 --no-pager && exit 1)

    echo "Deployment successful. Application is running."

logsBucket: 'gs://impactful-study-470015-g5_cloudbuild_logs'
options:
  logging: GCS_ONLY
