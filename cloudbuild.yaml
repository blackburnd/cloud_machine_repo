steps:
- name: 'gcr.io/cloud-builders/gcloud'
  args:
  - 'compute'
  - 'ssh'
  - 'blackburnd@instance-20250825-143058'
  - '--zone'
  - 'us-central1-c'
  - '--command'
  - |
    set -e

    # Stop any running Nginx and kill all nginx processes to be safe
    sudo systemctl stop nginx || true
    sudo killall -9 nginx || true
    
    # Navigate to the repository directory or clone it
    if [ -d "/opt/cloud_machine_repo/.git" ]; then
      cd /opt/cloud_machine_repo
      git pull origin main
    else
      sudo git clone https://github.com/blackburnd/cloud_machine_repo.git /opt/cloud_machine_repo
      sudo chown -R blackburnd:blackburnd /opt/cloud_machine_repo
      cd /opt/cloud_machine_repo
    fi
    
    # Create a virtual environment and install dependencies
    if [ ! -d "venv" ]; then
      python3 -m venv venv
    fi
    source venv/bin/activate
    pip install -r requirements.txt
    
    # Make scripts executable
    chmod +x setup_ssl.sh

    # Clean up any previous Nginx config
    sudo rm -f /etc/nginx/sites-enabled/blackburnsystems.com
    sudo rm -f /etc/nginx/sites-enabled/default
    sudo rm -f /etc/nginx/conf.d/default.conf

    # Copy the Nginx configuration
    sudo cp nginx/blackburnsystems.com /etc/nginx/sites-available/
    sudo ln -sf /etc/nginx/sites-available/blackburnsystems.com /etc/nginx/sites-enabled/

    # Validate the Nginx configuration before restarting
    sudo nginx -t

    # Install netcat for network testing
    echo "Installing network tools..."
    sudo apt-get update
    sudo apt-get install -y netcat-openbsd

    # Test network connectivity to the database
    echo "Testing database connectivity..."
    if ping -c 3 ${_PG_HOST}; then
      echo "✓ Can ping database host"
    else
      echo "✗ Cannot ping database host"
    fi
    
    # Test if the database port is reachable
    if nc -z ${_PG_HOST} ${_PG_PORT}; then
      echo "✓ Database port ${_PG_PORT} is reachable"
    else
      echo "✗ Database port ${_PG_PORT} is not reachable"
    fi
    
    # Show network interface and routing info
    echo "=== Network Debug Info ==="
    ip route show
    echo "VM network interface:"
    ip addr show ens4
    echo "=========================="

    # Create a systemd override file to set the environment variable
    sudo mkdir -p /etc/systemd/system/portfolio.service.d
    sudo tee /etc/systemd/system/portfolio.service.d/override.conf > /dev/null << EOF
    [Service]
    Environment=_DATABASE_URL=postgresql://${_PG_USER}:${_PG_PASS}@${_PG_HOST}:${_PG_PORT}/${_PG_DB}
    EOF

    # Debug: Show what was written to the override file
    echo "=== Database configuration written ==="
    sudo cat /etc/systemd/system/portfolio.service.d/override.conf
    echo "======================================"

    # Set up the systemd service
    sudo cp portfolio.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable portfolio.service
    sudo systemctl restart portfolio.service

    # Start Nginx
    sudo systemctl start nginx
    sudo systemctl enable nginx

    # Wait for the application to start and check its status
    echo "Waiting for application to start..."
    sleep 10
    if sudo systemctl is-active --quiet portfolio.service; then
      echo "Application started successfully"
      echo "=== Service Status ==="
      sudo systemctl status portfolio.service --no-pager -l
      
      # Test database connectivity from the application
      echo "=== Testing Database Connectivity ==="
      
      # Check if the application can connect to the database
      # Method 1: Check application logs for database connection messages
      echo "Checking application logs for database connection info..."
      sudo journalctl -u portfolio.service --no-pager -n 50 | grep -i -E "(database|postgres|connection|error)" || echo "No database-related log entries found"
      
      # Method 2: Test database connection using psql if available
      if command -v psql &> /dev/null; then
        echo "Testing direct database connection with psql..."
        if PGPASSWORD="${_PG_PASS}" psql -h ${_PG_HOST} -U ${_PG_USER} -d ${_PG_DB} -c "SELECT version();" >/dev/null 2>&1; then
          echo "✓ Direct database connection successful"
        else
          echo "✗ Direct database connection failed"
        fi
      else
        echo "psql not available, installing postgresql-client..."
        sudo apt-get install -y postgresql-client
        if PGPASSWORD="${_PG_PASS}" psql -h ${_PG_HOST} -U ${_PG_USER} -d ${_PG_DB} -c "SELECT version();" >/dev/null 2>&1; then
          echo "✓ Direct database connection successful"
        else
          echo "✗ Direct database connection failed"
          echo "Database connection error details:"
          PGPASSWORD="${_PG_PASS}" psql -h ${_PG_HOST} -U ${_PG_USER} -d ${_PG_DB} -c "SELECT version();" 2>&1 || true
        fi
      fi
      
      # Method 3: Test the application endpoint that uses the database
      echo "Testing application endpoint that uses database..."
      sleep 5
      if curl -f http://localhost:8000/health >/dev/null 2>&1; then
        echo "✓ Application health endpoint responds"
        curl -s http://localhost:8000/health
      else
        echo "✗ Application health endpoint not responding"
        echo "Available endpoints:"
        curl -s http://localhost:8000/ 2>/dev/null || echo "Application not responding"
      fi
      
    else
      echo "Application failed to start. Showing logs:"
      sudo journalctl -u portfolio.service --no-pager -n 20
      exit 1
    fi

    # Create directories and download resume
    mkdir -p app/assets/img app/assets/files
    
    # Download resume from Google Drive (update the filename to match your actual file)
    echo "Downloading resume..."
    wget -O app/assets/files/danielblackburn.pdf "https://drive.google.com/uc?export=download&id=1GO28ZNW3HtlP94whb1UshobhCXqFenba"
    
    # Verify the file was downloaded
    if [ -f "app/assets/files/danielblackburn.pdf" ]; then
        echo "✓ Resume downloaded successfully"
        ls -la app/assets/files/
    else
        echo "✗ Resume download failed"
    fi

substitutions:
  _PG_USER: 'postgres'
  _PG_PASS: '8JB6On1kTf6puF-'
  _PG_HOST: '10.24.80.3'
  _PG_PORT: '5432'
  _PG_DB: 'daniel_portfolio'

logsBucket: 'gs://impactful-study-470015-g5_cloudbuild_logs'
options:
  logging: GCS_ONLY
